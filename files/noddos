#!/bin/sh /etc/rc.common

START=90
STOP=20

USE_PROCD=1

service_triggers() {
        procd_add_reload_trigger "noddos"
}

reload_service() {
	kill -SIGTERM $(cat /var/lib/noddos/noddos.pid)
}

start_service() {
  echo "Setting dnsmasq configuration options"
  uci set dhcp.@dnsmasq[0].logqueries="1"
  uci set dhcp.@dnsmasq[0].logdhcp="1"
  uci set dhcp.@dnsmasq[0].logfile="/tmp/dnsmasq.log"
  uci set dhcp.lan.limit='60'

  echo "adding multicast router"
  route add -net 224.0.0.0 netmask 224.0.0.0 dev br-lan

  echo "Adding firewall rule to allow IGMP from LAN"
  #uci set firewall.@rule[2]=rule
  #uci set firewall.@rule[2].name='Allow-IGMP-LAN'
  #uci set firewall.@rule[2].proto='igmp'
  #uci set firewall.@rule[2].family='ipv4'
  #uci set firewall.@rule[2].target='ACCEPT'
  #uci set firewall.@rule[2].src='lan'
  #echo "" >>/etc/config/firewall
  #echo "config rule" >>/etc/config/firewall
  #echo "        option name 'Allow-IGMP'" >>/etc/config/firewall
  #echo "        option proto 'igmp'" >>/etc/config/firewall
  #echo "        option family 'ipv4'" >>/etc/config/firewall
  #echo "        option target 'ACCEPT'" >>/etc/config/firewall
  #echo "        option src 'lan'" >>/etc/config/firewall


  procd_open_instance
  procd_set_param command /usr/sbin/noddos -n -c /etc/noddos/noddos.conf

  # respawn automatically if something died, be careful if you have an
  # alternative process supervisor if process dies sooner than
  # respawn_threshold, it is considered crashed and after 5 retries the
  # service is stopped
  procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}

  procd_set_param file /etc/noddos/noddos.conf
  procd_set_param stdout 0 # forward stdout of the command to logd
  procd_set_param stderr 0 # same for stderr
  procd_set_param user root # run service as user nobody
  procd_close_instance
}

savematches_service() {
	kill -SIGUSR1 $(cat /var/lib/noddos/noddos.pid)
}

savedata_service() {
	kill -SIGUSR2 $(cat /var/lib/noddos/noddos.pid)
}

